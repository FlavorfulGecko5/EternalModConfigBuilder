To best understand what is happening here, you should have "config.txt" open and readable alongside this file.
To read all the syntax rules for options and names, see "Constants.cs"

Let's start simple: the following label has a constant "999" as it's expression.
This means the label will be replaced with "999" when this file is parsed.
999

To insert an option we defined in our configuration file into the expression,
we encase the option's name in braces {}. The following label would be replaced
with the value of the option "x", which is defined in the configuration file.
123

Of course, our expressions can be more complicated than just single values.
We can have a full range of arithmetic expressions - as the following two 
examples show. Note that both "x" and "y" are defined in our configuration file.
93
53.2





What if the values we want to insert are strings? Wherever this is the case,
we must put single quotes ('') around string literals or variables representing strings
The Revenant
cacodemon

Using these rules, we can concatenate (combine) two strings together like so:
cacodemon is the best demon





We can also perform a rule range of logical expressions:
False
True
False





Variables can be used to represent other variables. The following label will
be replaced with the value of "y":
-30





This segment demonstrates how 'Text' variables are output:
line #1
line #2
line #3
As you can see, each element of the list is output onto it's own line





This segment shows how to access variables created by 'Map' Options
234
True
the third value in the map

Simply inputting the name of the Map Option with no key will yield
the number of entries inside the Map.

This Map Option has 3 entries.





This segment shows how to use variables created by Options that use custom types.
These variables can be defined as strings, numbers, Booleans or lists containing these.
For lists, the same syntax is used as standard list variables.
123
Howdy
True
hooray
obj.THIRD contains 2 elements.

Finally, we can also access the 'Value' defined in the Type Definition. Notice that
the list was merged into a single value and {!THIS} was replaced with the current
Option's name.
Hello there. The name of this Option is obj





Next-up, we have toggle labels. Whereas a variable label will be replaced with whatever
it's expression evaluates to, a toggle label can be used to keep or remove an entire
section of a file, based on what it's expression evaluates to. Toggle label expressions
MUST evaluate to a Boolean (true/false), or a numerical value.

I will still be visible when this file is parsed.




Toggle labels can be nested inside of each other

I will be visible when this file is parsed.









Expressions are evaluated by first substituting variables, then computing the result.
However, you may run into situations where you need to fully evaluate parts of an expression
before variables are substituted into the rest of it. In these instances, you can define a
subexpression block using the format: {!SUB}[Expression]{!SUBEND}
10


I will be visible thanks to subexpressions!






Starting in Beta 1.5.0, you may define and use list variables in your configuration files.
The elements of a list are accessed by their index, starting at index 0
The first element in 'listA' is 1

The name of the list, without any index notation, represents the number of elements inside the list:
listA contains 4 elements

To access the last element in the list, using the number of elements, you could do something like:
The last element in 'listA' is True

This last expression also shows a practical application of the subexpression system discussed above.





Beta 1.8.0 has introduced the Loop Label. This allows you to iterate over a set of integers and evaluate an expression multiple times.

A simple example: hello hello hello 
> This label will be replaced with the world "hello" written three times.
> Here, 1 is the initial loop value, 3 is the final value, and 'hello' is the expression that will be evaluated multiple times. 
> These three elements are separated by the character '&'

We can retrieve the loop value using the '{!inc}' symbol. The following loop label will output all loop values, one per iteration:
-3 -2 -1 0 1 2 3 4 5 

This label can be very powerful when combined with lists. For instance:
1
hello there
3.45
True


This loop will output all elements of the listA variable - one element per line.





There are many other features you can include in these expressions. To get a better idea of what
operators and functions are available, consult the following documentation:
https://docs.microsoft.com/en-us/dotnet/api/system.data.datacolumn.expression?redirectedfrom=MSDN&view=net-6.0#System_Data_DataColumn_Expression